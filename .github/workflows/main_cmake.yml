name: Main

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '00 04 * * *'  # 4am zulu every day

env:
  BUILD_TYPE: Release

jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      BUILD_REQUIRED: ${{ steps.check_date.outputs.BUILD_REQUIRED }}
    steps:
      - uses: actions/checkout@v3
      - name: Print latest_commit
        run: echo ${{ github.sha }}

      - id: check_date
        continue-on-error: true
        name: Check for commits in last 24 hours
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=BUILD_REQUIRED::false"

  build:
    needs:
      - check_date
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || needs.check_date.outputs.BUILD_REQUIRED != 'false' }}

    runs-on: ubuntu-latest
    name: Build and test main branch

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Unit Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} -R "UNIT"

    - name: Functional Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} -R "FUNC"

    - name: Known Answer Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} -R "KAT"

    # TODO Nightly builds for a variety of platforms rather than every push

  archive-build-artifacts:
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Step 1 - Create a temporary artifact downloads folder
        run: mkdir -p ${{github.workspace}}/install
        
      - name: Step 2 - Build the install target
        run: cmake --build ${{github.workspace}}/build --target install
    
      - name: Step 3 - Upload the artifact
        uses: actions/upload-artifact@v2
        with: 
          name: linux-amd64
          path: ${{github.workspace}}/install
